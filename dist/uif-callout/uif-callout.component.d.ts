import { ElementRef, AfterContentInit, OnChanges, EventEmitter, SimpleChanges, OnDestroy } from '@angular/core';
import { UifCalloutDirectionalHint, UifCalloutTriggerHint } from './uif-callout.models';
import { UifOpenCalloutComponent } from './uif-callout-subcomponents.component';
import 'rxjs/add/observable/fromEvent';
export declare class UifCalloutComponent implements AfterContentInit, OnChanges, OnDestroy {
    private elementRef;
    openCalloutComponent: typeof UifOpenCalloutComponent;
    isOpen: boolean;
    isOpenChange: EventEmitter<boolean | Boolean>;
    nativeEl: any;
    nativeCallout: any;
    nativeCalloutTrigger: any;
    nativeCalloutContainer: any;
    nativeBeak: any;
    calloutTriggerHandler: any;
    elementIntialized: boolean;
    isTooltip: boolean;
    appendToBody: boolean;
    showHeader: boolean;
    showActions: boolean;
    headerClasses: string;
    contentClasses: string;
    calloutClasses: string;
    position: string;
    gap: number;
    showArrow: Boolean;
    showClose: Boolean;
    directionalHint: UifCalloutDirectionalHint;
    triggerHint: UifCalloutTriggerHint;
    onTextEllipsis: boolean;
    maxWidth: any;
    msCalloutMain: any;
    msCalloutHost: any;
    msCalloutContainer: any;
    msOpenCalloutTrigger: UifOpenCalloutComponent;
    scrollElm: any;
    UifCalloutTriggerHints: typeof UifCalloutTriggerHint;
    listeners: any;
    listenersPopulated: boolean;
    disableClicks: boolean;
    tabIndex: any;
    private childInDOM;
    private onDocumnetKeyUpListener;
    private eventSubscribers;
    constructor(elementRef: ElementRef);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    clearDocumentListener(): void;
    addDocumentListener(): void;
    openHandler(): void;
    closeHandler(): void;
    toggleHandler(): void;
    onScrollAndResize(): void;
    addListeners(): void;
    initCallout(): void;
    open(): void;
    openCallout(): void;
    close(): void;
    closeCallout(): void;
    toggleCallout(): void;
}

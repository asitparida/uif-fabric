import { EventEmitter, AfterViewInit, ElementRef, OnInit, OnDestroy } from '@angular/core';
import { UIfColorPickerModel } from './uif-color-picker.models';
import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/operator/debounceTime';
export declare class UifColorPickerComponent implements AfterViewInit, OnInit, OnDestroy {
    private elRef;
    COLOR_RECT: string;
    color: UIfColorPickerModel;
    hex: string;
    hexChange: EventEmitter<String>;
    colorRectId: string;
    colorRect: any;
    colorRectThumb: any;
    colorHueSlide: any;
    colorHueSlideThumb: any;
    colorAlphaSlide: any;
    colorAlphaSlideThumb: any;
    colorAlphaSlideOverlay: any;
    private colorRectProps;
    private colorHueSlideProps;
    private colorAlphaSlideProps;
    private colorRectThumbActive;
    private colorHueSlideThumbActive;
    private colorAlphaSlideThumbActive;
    private eventSubscribers;
    constructor(elRef: ElementRef);
    ngOnInit(): void;
    init(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    initFns(): void;
    initiazlizeColorRect(): void;
    initializeColorRectThumb(): void;
    initializeHueSlider(): void;
    initializeAlphaSlider(): void;
    createListeners(): void;
    collectProps(): void;
    onColorRectMouseMove($event: MouseEvent, forceFalse?: boolean): void;
    assignColorRectThumbPosition(xPercent: any, yPercent: any): void;
    onColorHueSlideMouseMove($event: MouseEvent, forceFalse?: boolean): void;
    assignColorHueSliderThumbPosition(xPercent: any): void;
    onColorAlphaSlideMouseMove($event: MouseEvent, forceFalse?: boolean): void;
    assignColorAlphaSliderThumbPosition(xPercent: any): void;
    updateColorRectThumbColor(): void;
    updateAlphaSlideOverlay(): void;
    onColorSVUpdate(s: number, v: number): void;
    onColorHueUpadate(hue: number): void;
    onColorAlphaUpdate(alpha: number): void;
    onHexInputChange(): void;
    onRGBAInputChange(): void;
    isValidColor(color: UIfColorPickerModel): boolean;
}
